import { useChannelStateContext } from '../../../../context';
import { useEffect, useRef, useState } from 'react';
import { MESSAGE_LIST_MAIN_PANEL_CLASS } from '../../MessageListMainPanel';
import { UNREAD_MESSAGE_SEPARATOR_CLASS } from '../../UnreadMessagesSeparator';
var targetIsVisibleInContainer = function (element, container) {
    var msgListHeight = container.getBoundingClientRect().height;
    var targetMessageY = element.getBoundingClientRect().y;
    return 0 <= targetMessageY && targetMessageY <= msgListHeight;
};
export var useUnreadMessagesNotification = function (_a) {
    var isMessageListScrolledToBottom = _a.isMessageListScrolledToBottom, unreadCount = _a.unreadCount;
    var messages = useChannelStateContext('UnreadMessagesNotification').messages;
    var _b = useState(false), show = _b[0], setShow = _b[1];
    var isScrolledAboveTargetTop = useRef(false);
    var intersectionObserverIsSupported = typeof IntersectionObserver !== 'undefined';
    useEffect(function () {
        if (!(unreadCount && intersectionObserverIsSupported)) {
            setShow(false);
            return;
        }
        var msgListPanel = document.querySelector(".".concat(MESSAGE_LIST_MAIN_PANEL_CLASS));
        if (!msgListPanel)
            return;
        var observedTarget = document.querySelector(".".concat(UNREAD_MESSAGE_SEPARATOR_CLASS));
        if (!observedTarget) {
            setShow(true);
            return;
        }
        setShow(!targetIsVisibleInContainer(observedTarget, msgListPanel));
        var observer = new IntersectionObserver(function (elements) {
            if (!elements.length)
                return;
            var _a = elements[0], boundingClientRect = _a.boundingClientRect, isIntersecting = _a.isIntersecting, rootBounds = _a.rootBounds;
            var isScrolledAboveTargetTopCurrent = !!(rootBounds &&
                boundingClientRect &&
                rootBounds.bottom < boundingClientRect.top);
            setShow(!isIntersecting && !isScrolledAboveTargetTopCurrent);
            isScrolledAboveTargetTop.current = isScrolledAboveTargetTopCurrent;
        }, { root: msgListPanel });
        observer.observe(observedTarget);
        return function () {
            observer.disconnect();
        };
    }, [intersectionObserverIsSupported, messages, unreadCount]);
    useEffect(function () {
        /**
         * Handle situation when scrollToBottom is called from another component when the msg list is scrolled above the observed target (unread separator).
         * The intersection observer is not triggered when Element.scrollTo() is called. So we end up in a situation when we are scrolled to the bottom
         * and at the same time scrolled above the observed target.
         */
        if (unreadCount && isMessageListScrolledToBottom && isScrolledAboveTargetTop.current) {
            setShow(true);
            isScrolledAboveTargetTop.current = false;
        }
    }, [isMessageListScrolledToBottom, unreadCount]);
    return { show: show && intersectionObserverIsSupported };
};
